#+TITLE: Emacs configuration file
#+AUTHOR: Auralcat
#+DATE: 2017:05:17
#+LANGUAGE: en

* Environment Customizations
#+BEGIN_SRC emacs-lisp :tangle yes
;; A small performance improvement
(setq redisplay-dont-pause t)

;; Store all backups in a specific folder:
(setq backup-directory-alist `(("." . "~/file-bouncer/emacs-backups")))

;; Manual packages load path
(add-to-list 'load-path "~/my-dotfiles/.emacs.d/manual-packages/emacs-solargraph/")

;; Backup files by copying them
(setq backup-by-copying t)

;; Save my desktop
(desktop-save-mode 1)

;; I'm too lazy to type "yes" or "no"
(fset 'yes-or-no-p 'y-or-n-p)

;; Clean whitespace before saving a file
(add-hook 'before-save-hook (quote whitespace-cleanup))

;; Allow only one theme at a time
(setq custom-theme-allow-multiple-selections nil)

;; Enable ido-mode (fewer keystrokes to switch buffers!)
(ido-mode 1)

;; ido-mode in the minibuffer
(icomplete-mode 1)

;; Enable windmove (switch windows with Shift+Arrow keys)
(when (fboundp 'windmove-default-keybindings)
    (windmove-default-keybindings))

;; Replace the built-in buffer menu with ibuffer
(global-set-key [24 2] (quote ibuffer))

;; Prevent the scratch buffer from being killed
(with-current-buffer "*scratch*"
    (emacs-lock-mode 'kill))

;; Set default font for Emacs
(set-frame-font "Ubuntu Mono 12")

;; Enable auto-revert-mode
(global-auto-revert-mode t)

;; Remove the menu bar in terminal mode
(when (not (display-graphic-p))
  (menu-bar-mode -1))


;; Use Bash as default shell interpreter
(setq org-babel-sh-command "/bin/bash")

;; Activate Company mode
(add-hook 'after-init-hook 'global-company-mode)

;; Enable global Abbrev mode
(setq-default abbrev-mode t)

;; Save last edited place in files
(require 'saveplace)
(setq-default save-place t)
;; (save-place-mode 1)
#+END_SRC
* Hooks
#+BEGIN_SRC emacs-lisp :tangle yes
;; Prog-mode is from where all the programming modes are derived from.
;; This means that if you call prog-mode-hook, the settings will be
;; applied to ALL programming modes in Emacs.
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
(add-hook 'text-mode-hook 'column-number-mode)

;; Ruby
;; Activate ruby-tools
(add-hook 'enh-ruby-mode-hook (quote ruby-tools-mode))

;; Create filling for org-mode
(add-hook 'org-mode-hook 'auto-fill-mode)
#+END_SRC
* IRC
Qui Nov  2 19:57:06 BRST 2017 - Tried using IRC inside Emacs, didn't please
me, too many buffers to work with... for now.
#+BEGIN_SRC emacs-lisp :tangle yes
;; Use Weechat from Emacs
(require-package 'weechat)
;; Bind M-p to switch to previous buffer
#+END_SRC
* Custom functions
#+BEGIN_SRC emacs-lisp :tangle yes
;; Recreate scratch buffer
(defun create-scratch-buffer ()
  "create a scratch buffer"
  (interactive)
  (switch-to-buffer (get-buffer-create "*scratch*"))
  (org-mode)
  (insert initial-scratch-message)
  ;; Prevent the scratch buffer from being killed
  (with-current-buffer "*scratch*"
      (emacs-lock-mode 'kill)))

;; Unfill region, AKA leave single huge line
(defun unfill-region (beg end)
  "Unfill the region, joining text paragraphs into a single
  logical line.  This is useful, e.g., for use with
  `visual-line-mode'."
  (interactive "*r")
    (let ((fill-column (point-max)))
      (fill-region beg end)))

;; Call the live page reload script from within Emacs and bind it to a key
;; (defun css-live-reload-current-webpage ()
;;     (when (and (stringp buffer-file-name)
;;       (string-match "\\.scss\\'" buffer-file-name))
;;     (shell-command "~/my-dotfiles/bash/live-reload-firefox.sh")))

;; The original idea is to call this function when saving a stylesheet
;; (add-hook 'after-save-hook 'css-live-reload-current-webpage)

#+END_SRC
* Function Aliases
#+BEGIN_SRC emacs-lisp :tangle yes
;; This is how you define aliases for Elisp functions
(defalias 'plp 'package-list-packages)
#+END_SRC
* Packages
** Major Modes
*** Sass-mode
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package sass-mode
       ;; Set Sass mode for SASS files and Css mode for SCSS files.
       :config
       (add-to-list 'auto-mode-alist
      '("\\.sass\\'" . sass-mode)))

    #+END_SRC
*** SCSS-mode
    Major mode for SCSS files, together with Sass.
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package scss-mode

       :config
       (add-to-list 'auto-mode-alist
      '("\\.scss\\'" . scss-mode)))
    #+END_SRC

*** Js2-mode
    A better default Javascript mode
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package js2-mode)

    ;; Set js2-mode as default mode for JS files
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))

    ;; Set syntax highlight level
    (setq js2-highlight-level 3)
    #+END_SRC
*** PHP-mode
    PHP support for Emacs.
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package php-mode)
    (add-hook 'php-mode-hook (lambda() (add-to-list 'company-backends 'company-php)))
    #+END_SRC
*** Enhanced-ruby-mode
    A better ruby-mode.
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package enh-ruby-mode)

    ;; Set it as default mode for Ruby files
    (add-to-list 'auto-mode-alist
    '("\\(?:\\.rb\\|ru\\|rake\\|thor\\|jbuilder\\|gemspec\\|podspec\\|/\\(?:Gem\\|Rake\\|Cap\\|Thor\\|Vagrant\\|Guard\\|Pod\\)file\\)\\'"
    . enh-ruby-mode))
    #+END_SRC
*** Web Mode
    I use this for HTML files mostly, works good for PHP too.
    #+BEGIN_SRC emacs-lisp :tangle yes

    (require-package 'web-mode)

    ;; File associations
    (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))

    ;; Engine associations
    (setq web-mode-engines-alist
    '(("php"    . "\\.phtml\\'")
    ("blade"  . "\\.blade\\."))
    )
    #+END_SRC
*** YAML-mode
    YAML support for Emacs.
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package yaml-mode)
    #+END_SRC
*** CSV-mode
    CSV support for Emacs.
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package csv-mode)
    #+END_SRC
*** Vue-mode
    Vue components syntax support for Emacs
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package vue-mode)
    #+END_SRC
** Minor Modes
*** Projectile
    Manage projects in Emacs.
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package projectile)
    ;; Enable it globally.
    (add-hook 'after-init-hook #'projectile-global-mode)
    #+END_SRC
*** Autopair
   Automatically pair braces and quotes like in TextMate
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package autopair
      :init (autopair-global-mode))
   #+END_SRC
*** Emmet-mode
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package emmet-mode)
    #+END_SRC
*** Highlight-numbers mode
    Sets font lock faces to numbers in Emacs.
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package highlight-numbers)
    (add-hook 'prog-mode-hook 'highlight-numbers-mode)
    #+END_SRC
*** Flycheck
    Syntax checker, replaces flymake
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package flycheck
       :config
       ;; turn on flychecking globally
       (add-hook 'after-init-hook #'global-flycheck-mode))
    #+END_SRC
*** Ruby Tools
    Goodies for Ruby programming modes.
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package ruby-tools)
    #+END_SRC
*** Engine mode
    Query search engines from Emacs.
    #+BEGIN_SRC emacs-lisp :tangle yes
    ;; Ensure it's loaded
    (use-package engine-mode)
    ;; Activate it
    (engine-mode t)

    ;; Define search engines to use
    (defengine github
    "https://github.com/search?ref=simplesearch&q=%s"
    :keybinding "g")
    (defengine duckduckgo
    "https://duckduckgo.com/?q=%s"
    :keybinding "d")
    (defengine youtube
    "https://www.youtube.com/results?search_query=%s"
    :keybinding "y")
    (defengine stackoverflow
    "https://stackoverflow.com/search?q=%s"
    :keybinding "s")
    #+END_SRC
*** Evil Mode
    Yes, I'm committing this heresy
    #+BEGIN_SRC emacs-lisp :tangle yes
    #+END_SRC
**** Evil-leader
     Add a prefix key to Evil mode, like the Leader key in Vim.
     #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package evil-leader)
     (global-evil-leader-mode)
     ;; Evil mode needs to be loaded after evil-leader
     (use-package evil)
     (evil-mode 1)

     ;; Load configs
     (load "~/my-dotfiles/.emacs.d/evilrc")
     #+END_SRC
**** Evil Surround
     Easier manipulation of delimiters, emulation of vim.surround
     #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package evil-surround)
     (global-evil-surround-mode)
     #+END_SRC
*** Helm
     Incremental completion and selection narrowing framework
     #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package helm)
     (require 'helm-config)
     (helm-mode 1)

     ;; Bind the keys I want:
     (global-set-key (kbd "M-x") 'helm-M-x)
     (global-set-key (kbd "Â»") 'helm-M-x)
     (global-set-key (kbd "C-x C-f") 'helm-find-files)
     (global-set-key (kbd "C-x b") 'helm-buffers-list)

     ;; Complete with tab in Helm buffer, remap action menu to C-tab
     (define-key helm-map (kbd "<tab>") 'hippie-expand)
     (define-key helm-map (kbd "C-<tab>") 'helm--action-prompt)

     ;; Enable fuzzy matching
     (setq helm-M-x-fuzzy-match t)
     #+END_SRC
*** Company
    *COMPlete ANYthing* inside Emacs.
    I switched to it because it works in GUI Emacs and auto-complete doesn't.
    #+BEGIN_SRC emacs-lisp :tangle yes
    (require-package 'company)

    ;; Add Tern to Company
    (require-package 'company-tern)
    (require-package 'tern)

    ;; Call that inside js2-mode and add tern to company backends
    (defun tern-mode-tweaks ()
    (add-to-list 'company-backends 'company-tern)
    (tern-mode 1))
    (add-hook 'js2-mode-hook 'tern-mode-tweaks)
    ;; Autocompletion for Bootstrap/FontAwesome classes
    (require-package 'ac-html-bootstrap)

    ;; Web-mode completions
    (require-package 'company-web)

    ;; Add web-mode completions when started
    (require 'company-web-html)

    ;; Company statistics package
    (use-package company-statistics)
    (company-statistics-mode)

    ;; Company with prescient.el offers better sorting of completion candidates.
    ;; I don't know if it clashes with company-statistics.
    (use-package company-prescient)

    ;; Activate it
    (company-prescient-mode)
    #+END_SRC
*** Keyfreq
    Shows most used commands in editing session.
    To see the data, run (keyfreq-show) with M-:
    #+BEGIN_SRC emacs-lisp :tangle yes
    (require-package 'keyfreq)

    ;; Ignore arrow commands and self-insert-commands
    (setq keyfreq-excluded-commands
    '(self-insert-command
    org-self-insert-command
    abort-recursive-edit
    forward-char
    backward-char
    previous-line
    next-line))

    ;; Activate it
    (keyfreq-mode 1)
    (keyfreq-autosave-mode 1)
    #+END_SRC
*** Diminish
    Free some space in the mode line removing superfluous mode indications.
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package diminish
       ;; These are loaded at startup
       :diminish helm-mode
       :diminish company-mode
       :diminish undo-tree-mode
       :diminish auto-revert-mode
       :diminish auto-fill-function
       :diminish abbrev-mode
       :diminish autopair-mode)
    ;; These are loaded at other moments
    (eval-after-load "editorconfig" '(diminish 'editorconfig-mode))
    (eval-after-load "yasnippet" '(diminish 'yas-minor-mode))
    (eval-after-load "projectile" '(diminish 'projectile-mode))
    #+END_SRC
*** Editorconfig
    Helps developers define and maintain consistent coding styles
    between different editors and IDEs.
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package editorconfig
       :init
       ;; Activate it.
       (editorconfig-mode 1))
    #+END_SRC
*** Nyan-mode
    Put a Nyan Cat in your mode line! :3
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package nyan-mode)
    (nyan-mode 1)
    #+END_SRC
*** Mode Icons
    Indicate modes in the mode line using icons
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package mode-icons
       :init
       (mode-icons-mode))
    #+END_SRC
*** Emojify
    Add emoji support for Emacs
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package emojify)
    #+END_SRC
** Utilities
*** Helm-projectile
    Browse through Projectile commands using Helm.
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package helm-projectile)
    #+END_SRC
*** Ibuffer-projectile
    Enables filtering buffers by project.
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package ibuffer-projectile)
    #+END_SRC
*** Camcorder
    Record editing sessions in Emacs.
    Invoke with M-x camcorder-record, pause with F11 and finish with
    F12.
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package camcorder)
    #+END_SRC
*** Rainbow Delimiters
    Highlight parentheses, brackets and braces according to their
    depth.
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package rainbow-delimiters)
    ;; Add this to prog-mode
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
    #+END_SRC
*** Smart Mode Line
    Prettier mode line.
    You can activate it with M-x sml/setup.
    #+BEGIN_SRC emacs-lisp :tangle yes
    ;; Smart-mode-line depends on powerline
    (require-package 'powerline)
    (require 'powerline)
    ;; (require-package 'smart-mode-line)

    #+END_SRC
*** Web-beautify
    Format HTML/CSS and JS code with js-beautify
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package web-beautify)
    #+END_SRC
*** Magit
    How to win at Git from Emacs.
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package magit)
    #+END_SRC
*** Eshell configurations
    #+BEGIN_SRC emacs-lisp :tangle yes
    ;; Eshell extras
    (use-package eshell-prompt-extras)

    ;; More configs
    (with-eval-after-load "esh-opt"
    (autoload 'epe-theme-lambda "eshell-prompt-extras")
    (setq eshell-highlight-prompt t
    eshell-prompt-function 'epe-theme-lambda))
    #+END_SRC
*** Yasnippets
    It originally came with company-mode, it's handy to write faster
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package yasnippet-snippets)
    #+END_SRC
*** Theme Changer
    Change current theme depending on time of the day
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package theme-changer
       :config
       (progn ;; Set the location
       (setq calendar-location-name "Curitiba, PR")
       (setq calendar-latitude -25.41)
       (setq calendar-longitude -49.25)

       ;; Specify the day and night themes:
       (change-theme 'whiteboard 'fairyfloss)))
    #+END_SRC
*** Ace Jump Mode
    Move to any word with 2 keypresses.
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package ace-jump-mode)
    #+END_SRC
*** Robe
    Ruby's autocomplete, navigation and project tools, especially for
    Rails.
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package robe)
    (add-hook 'enh-ruby-mode-hook 'robe-mode)

    ;; Integrate with Company
    (eval-after-load 'company '(push 'company-robe company-backends))
    #+END_SRC
*** RVM
    Ruby Version Manager. Akin to python's virtualenv.
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package rvm)
    #+END_SRC
*** Anzu
    Show search result count in the mode line.
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package evil-anzu)
    (global-anzu-mode)
    #+END_SRC
*** Vagrant TRAMP
    Open files in running Vagrant box using TRAMP
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package vagrant-tramp)
    #+END_SRC

* Themes
** Moe
   Light and dark theme, with some extra stuff.
   Comes with support for smart-mode-line.
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package moe-theme)
   #+END_SRC
** Abyss
   Dark contrast theme
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package abyss-theme)
   #+END_SRC
* Mode Line
** Moe Modeline Themes
   Use moe-theme's powerline support instead of sml
   #+BEGIN_SRC emacs-lisp :tangle yes
   ;; Show highlighted buffer-id as decoration. (Default: nil)
   (setq moe-theme-highlight-buffer-id t)

   ;; Activate SML
   ;; (sml/setup t)
   ;; Choose a color for the mode line (Default: blue)
   (powerline-moe-theme)
   (moe-theme-set-color 'purple)
   #+END_SRC
* Graphical
#+BEGIN_SRC emacs-lisp :tangle yes
;; Set font in graphical mode
(when (display-graphic-p)
    ;; Use Fantasque Sans Mono when available
    (if (member "Fantasque Sans Mono" (font-family-list))
    (set-frame-font "Fantasque Sans Mono 12")
    '(set-frame-font "Ubuntu Mono 12" nil t))
    ;; Remove menu and scroll bars in graphical mode
    (menu-bar-mode 0)
    (tool-bar-mode 0)
    (scroll-bar-mode 0)
    ;; Enable emoji images
    (global-emojify-mode)
    ;; Enable them in the mode line as well.
    (global-emojify-mode-line-mode)
    ;; Maximize frame on startup
    (toggle-frame-maximized))
#+END_SRC
* Keybindings
#+BEGIN_SRC emacs-lisp :tangle yes
;; Remapping the help hotkey so it doesn't clash with Unix backspace.
;; Whenever you want to call help you can use M-x help as well. F1
;; works too.
(define-key key-translation-map [?\C-h] [?\C-?])

;; Unfill region
(define-key global-map "\C-\M-q" 'unfill-region)

;; Switch to last buffer - I do it all the time
(global-set-key [27 112] (quote mode-line-other-buffer))

;; Mapping AltGr-d to delete-other-windows,
;; Another symbol I don't use often.
(global-set-key [240] (quote delete-other-windows))

;; Access buffers with Alt-Gr b
(global-set-key [8221] (quote ido-switch-buffer))

;; Map the Home and End keys to go to the beginning and end of the buffer
(global-set-key [home] (quote beginning-of-buffer))
(global-set-key [end] (quote end-of-buffer))

;; Move to beginning of line or indentation
(defun back-to-indentation-or-beginning () (interactive)
  (if (= (point) (progn (back-to-indentation) (point)))
      (beginning-of-line)))

(global-set-key (kbd "C-a") (quote back-to-indentation-or-beginning))

;; Hippie-Expand: change key to M-SPC; Replace dabbrev-expand
(global-set-key "\M- " 'hippie-expand)
(global-set-key "\M-/" 'hippie-expand)

;; Eshell - bind M-p to go back to previous buffer
(defun eshell-tweaks ()
    "Keybindings for the Emacs shell"
    (local-set-key (kbd "M-p") 'switch-to-prev-buffer)
    "Start in Emacs mode"
    (evil-set-initial-state 'eshell-mode 'emacs))
(add-hook 'eshell-mode-hook 'eshell-tweaks)

;; Set C-x j to go to current clocked task in org-mode
(global-set-key (kbd "C-x j") 'org-clock-goto)

#+END_SRC
* Web-mode
#+BEGIN_SRC emacs-lisp :tangle yes
(defun web-mode-keybindings ()
    "Define mode-specific keybindings like this."
    (local-set-key (kbd "C-c C-v") 'browse-url-of-buffer)
    (local-set-key (kbd "C-c /") 'sgml-close-tag))

;; Add company backends when loading web-mode.
(defun web-mode-company-load-backends ()
    (company-web-bootstrap+)
    (company-web-fa+))

(add-hook 'web-mode-hook 'web-mode-keybindings)
(add-hook 'web-mode-hook 'web-mode-company-load-backends)
#+END_SRC
* Org-mode
#+BEGIN_SRC emacs-lisp :tangle yes
;; We don't need Flycheck in org-mode buffers. Usually.
(add-hook 'org-mode-hook '(lambda() (flycheck-mode 0)))

;; Bind org-capture to C-c c
(global-set-key (kbd "\C-c c") (quote org-capture))

;; Bind org-pomodoro to C-x p
(global-set-key (kbd "\C-x p") (quote org-pomodoro))

;; Open the agenda with C-c a
(global-set-key [3 97] (quote org-agenda))

;; Open subheading with C-c RET and invert with M-RET
(local-set-key [27 13] (quote org-ctrl-c-ret))
(local-set-key [3 13] (quote org-insert-subheading))

;; Org-agenda: point the files you want it to read
;; (setq org-agenda-files (list "~/file-bouncer/org-files/contact-based-system/"))

;; Always respect the content of a heading when creating todos!
(local-set-key [M-S-return] (quote org-insert-todo-heading-respect-content))

;; Map C-S-enter to org-insert-todo-subheading
(local-set-key [C-S-return] (quote org-insert-todo-subheading))

#+END_SRC
** Org-bullets
   Change org-mode's *s to UTF-8 chars
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package org-bullets
      :init
      (add-hook 'org-mode-hook (lambda() (org-bullets-mode 1))))
   #+END_SRC
** Org-babel
*** Elixir
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package ob-elixir)
    #+END_SRC
*** Load languages
   #+BEGIN_SRC emacs-lisp :tangle yes
     (org-babel-do-load-languages
     'org-babel-load-languages
     '(
     ;; (sh . t)
    (python . t)
    (ruby . t)
    (elixir . t)
    (plantuml . t)
    (dot . t)
     ))
   #+END_SRC


* Variables
#+BEGIN_SRC emacs-lisp :tangle yes
;; Set Org mode as default mode for new buffers:
(setq-default major-mode 'org-mode)

;; Enable auto-fill mode by default
(auto-fill-mode 1)

;; Set default fill to 79
(set-fill-column 79)

;; Set line number mode and column number mode for code files
(line-number-mode 1)

;; Change tab width and change tabs to spaces
(setq-default tab-width 4)
(setq-default indent-tabs-mode nil)

;; Making Emacs auto-indent
(define-key global-map (kbd "RET") 'newline-and-indent)

;; Shows trailing whitespace, if any:
(setq-default show-trailing-whitespace t)
;; Don't do that for terminal mode!
(add-hook 'multi-term-mode-hook (setq-default show-trailing-whitespace nil))

(defun css-mode-tweaks()
  (emmet-mode 1)
  (rainbow-mode 1))

;; Emmet-mode: activate for html-mode, sgml-mode,
;; css-mode, web-mode and sass-mode
(add-hook 'sgml-mode-hook 'emmet-mode)
(add-hook 'sass-mode-hook 'css-mode-tweaks)
(add-hook 'web-mode-hook 'emmet-mode)

;; By the way, it's nice to add rainbow-mode for CSS
(add-hook 'css-mode-hook 'css-mode-tweaks)

;; Python: use python3 as default shell interpreter
(setq python-shell-interpreter "python3")

#+END_SRC
* Macros
#+BEGIN_SRC emacs-lisp :tangle yes
;; To save a macro, record it with C-x ( (start) and C-x ) (stop),
;; give it a name with C-x C-k n (C-k is for maKro) and
;; insert it in this file with insert-kbd-macro.
;; Then you execute it mapping it to a key! ð

;; Example macro: Mark todos as done
(fset 'org-mark-as-done
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ("d" 0 "%d")) arg)))
#+END_SRC
* Twittering mode
  Use Twitter from within Emacs!
  #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package twittering-mode
      :bind (("C-c r" . twittering-reply-to-user)
             ("C-c f" . twittering-favorite)
             ("C-c n" . twittering-native-retweet)))

    ;; Adjust update interval in seconds. It's timeR, not time!
    (setq twittering-timer-interval 3600)

    ;; Display icons (if applicable)
    (setq twittering-icon-mode t)

    ;; Use a master password so you don't have to ask for authentication every time
    (setq twittering-use-master-password t)
  #+END_SRC

  #+RESULTS:
  : t
* Packages saved for later need
** Perspective
# ** Perspective
#    Switch between named "perspectives" of the editor.
#    #+BEGIN_SRC emacs-lisp :tangle yes
#    (use-package perspective)
#    (persp-mode)
#    #+END_SRC
