# ELinks configuration file

set ui.sessions.homepage = "https://www.duckduckgo.com"

##############################
# Automatically saved options
#

## config
#  Configuration handling options.

  ## config.saving_style_w [0|1]
  #  This is internal option used when displaying a warning about obsolete
  #  config.saving_style. You shouldn't touch it.
  set config.saving_style_w = 1


## connection
#  Connection options.

  ## connection.ssl
  #  SSL options.

    ## connection.ssl.cert_verify [0|1]
    #  Verify the peer's SSL certificate.  If you enable this, set also "Trusted
    #  CA file".
    set connection.ssl.cert_verify = 0

## cookies
#  Cookies options.

  ## cookies.accept_policy <num>
  #  Cookies accepting policy:
  #  0 is accept no cookies
  #  1 is ask for confirmation before accepting cookie
  #  2 is accept all cookies
  set cookies.accept_policy = 0

  ## cookies.max_age <num>
  #  Cookie maximum age (in days):
  #  -1 is use cookie's expiration date if any
  #  0  is force expiration at the end of session, ignoring
  #     cookie's expiration date
  #  1+ is use cookie's expiration date, but limit age to the
  #     given number of days
  set cookies.max_age = 0

  ## cookies.paranoid_security [0|1]
  #  When enabled, we'll require three dots in cookies domain for all
  #  non-international domains (instead of just two dots). Some countries have
  #  generic second level domains (eg. .com.pl, .co.uk) and allowing sites to
  #  set cookies for these generic domains could potentially be very bad. Note,
  #  it is off by default as it breaks a lot of sites.
  set cookies.paranoid_security = 1

  ## cookies.save [0|1]
  #  Whether cookies should be loaded from and saved to disk.
  set cookies.save = 0

  ## cookies.resave [0|1]
  #  Save cookies after each change in cookies list? No effect when cookie
  #  saving (cookies.save) is off.
  set cookies.resave = 0


## ui
#  User interface options.

  ## ui.language <language>
  #  Language of user interface. 'System' means that the language will be
  #  extracted from the environment dynamically.
  set ui.language = "System"

# Automatically launch gthumb when clicking on a jpeg file
 set mime.extension.jpg="image/jpg"
 set mime.extension.jpeg="image/jpeg"
 set mime.extension.png="image/png"
 set mime.extension.gif="image/gif"
 set mime.extension.bmp="image/bmp"

 set mime.handler.image_viewer.unix.ask = 1
 set mime.handler.image_viewer.unix-xwin.ask = 0

 set mime.handler.image_viewer.unix.block = 1
 set mime.handler.image_viewer.unix-xwin.block = 0

 set mime.handler.image_viewer.unix.program = "gthumb %"
 set mime.handler.image_viewer.unix-xwin.program = "gthumb %"

 set mime.type.image.jpg = "image_viewer"
 set mime.type.image.jpeg = "image_viewer"
 set mime.type.image.png = "image_viewer"
 set mime.type.image.gif = "image_viewer"
 set mime.type.image.bmp = "image_viewer"



##############################
# Automatically saved options
#

## protocol 
#  Protocol specific options.

  ## protocol.rewrite 
  #  Rules for rewriting URIs entered in the goto dialog. It makes it possible
  #  to define a set of prefixes that will be expanded if they match a string
  #  entered in the goto dialog. The prefixes can be dumb, meaning that they
  #  work only like URI abbreviations, or smart ones, making it possible to pass
  #  arguments to them like search engine keywords.

    ## protocol.rewrite.dumb 
    #  Dumb prefixes, see enable-dumb description for details.

      ## protocol.rewrite.dumb.ddg <str>
      #  Replacement URI for this dumbprefix:
      #  %c in the string means the current URL
      #  %% in the string means '%'
      set protocol.rewrite.dumb.ddg = "http://www.duckduckgo.com"







##############################
# Automatically saved options
#

## protocol 
#  Protocol specific options.

  ## protocol.rewrite 
  #  Rules for rewriting URIs entered in the goto dialog. It makes it possible
  #  to define a set of prefixes that will be expanded if they match a string
  #  entered in the goto dialog. The prefixes can be dumb, meaning that they
  #  work only like URI abbreviations, or smart ones, making it possible to pass
  #  arguments to them like search engine keywords.

    ## protocol.rewrite.smart 
    #  Smart prefixes, see enable-smart description for details.

      ## protocol.rewrite.smart.cr <str>
      #  Replacement URI for this smartprefix:
      #  %c in the string means the current URL
      #  %s in the string means the whole argument to smartprefix
      #  %0,%1,...,%9 means argument 0, 1, ..., 9
      #  %% in the string means '%'
      unset protocol.rewrite.smart.cr

      ## protocol.rewrite.smart.ddg <str>
      #  Replacement URI for this smartprefix:
      #  %c in the string means the current URL
      #  %s in the string means the whole argument to smartprefix
      #  %0,%1,...,%9 means argument 0, 1, ..., 9
      #  %% in the string means '%'
      set protocol.rewrite.smart.ddg = "https://www.duckduckgo.com/?q=%s"







##############################
# Automatically saved options
#

## document 
#  Document options.

  ## document.uri_passing 
  #  Rules for passing URIs to external commands. When one rule is defined the
  #  link and tab menu will have a menu item that makes it possible to pass the
  #  the link, frame or tab URI to an external command. If several rules are
  #  defined the link and tab menu will have a submenu of items for each rule.
  #  
  #  Note, this is mostly useful for launching graphical viewers, since there is
  #  no support for releasing the terminal while the command runs. The action
  #  and submenus are also available by binding keys to the
  #  frame-external-command, the link-external-command, and the
  #  tab-external-command actions.

    ## document.uri_passing.youtube <str>
    #  A rule for passing URI to an external command. The format is:
    #  %c in the string means the current URL
    #  %% in the string means '%'
    #  Do _not_ put single- or double-quotes around %c.
    set document.uri_passing.youtube = "mpv %c"






##################################
# Automatically saved keybindings
#

bind "edit" "Ctrl-Y" = "cut-clipboard"
bind "edit" "Ctrl-I" = "auto-complete"
bind "edit" "Ctrl-X" = "none"
bind "edit" "Ctrl-W" = "kill-word-back"



##################################
# Automatically saved keybindings
#

bind "main" "Space" = "link-external-command"



##############################
# Automatically saved options
#

## mime 
#  MIME-related options (handlers of various MIME types).

  ## mime.handler 
  #  A file type handler is a set of information about how to use an external
  #  program to view a file. It is possible to refer to it for several MIME
  #  types -- e.g., you can define an 'image' handler to which
  #  mime.type.image.png, mime.type.image.jpeg, and so on will refer; or one
  #  might define a handler for a more specific type of file -- e.g., PDF files.
  #  Note you must define both a MIME handler and a MIME type association for it
  #  to work.

    ## mime.handler.video_viewer 

      ## mime.handler.video_viewer.unix 

        ## mime.handler.video_viewer.unix.ask [0|1]
        set mime.handler.video_viewer.unix.ask = 1
        ## mime.handler.video_viewer.unix.block [0|1]
        set mime.handler.video_viewer.unix.block = 1
        ## mime.handler.video_viewer.unix.program <str>
        set mime.handler.video_viewer.unix.program = "mpv %"

      ## mime.handler.video_viewer.unix-xwin 

        ## mime.handler.video_viewer.unix-xwin.program <str>
        set mime.handler.video_viewer.unix-xwin.program = "mpv %"




